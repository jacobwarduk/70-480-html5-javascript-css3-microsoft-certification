Introduction To Object-Oriented JavaScript - Object-Oriented JavaScript Fundamentals [Part 1]
---------------------------------------------------------------------------------------------

In most object-oriented languages, the first step to creating an object is creating a class, which describes the <em>methods</em> and <em>attributes</em> an object should have. From a class, many objects can be created (or <em>instantiated</em>), creating a new <em>instance</em> of that class.

To more easily understand classes and objects, imagine a class <code>Person</code>. This class may have the attributes <code>hairColour</code>, <codem>eyeColour</code>, <code>height</code>, <code>weight</code>, <code>profession</code>, and the methods <code>walk</code>, <code>talk</code>, <code>read</code>, <code>eat></code>, <code>sleep</code>. From this <code>Person</code> class we can instantiate many people objects. For example, we could create an instance called <code>Bob</code>, who has <code>blonde</code> hair, <code>blue</code> eyes, is <code>5' 10"</code>, weighs <code>11st 6lbs</code> and is a <code>programmer</code>. We could create an instance called <code>Carol</code>, who has <code>brown</code> hair, <code>green</code> eyes, is <code>5' 2"</code>, weighs <code>9st 2lbs</code> and is a <code>receptionist</code>. Using the methods we can instruct Bob to <code>sleep</code>, Carol to <code>walk</code> and <code>talk</code>, and so on. We can continue creating as many instances of the <code>Person</code> class as we like (within reason).

The three most important aspects of <acronym title="Object-Oriented Programming">OOP</acronym> are <em>encapsulation</em>, <em>inheritance</em> and <em>polymorphism</em>.


<h3>Encapsulation</h3>



<h3>Inheritance</h3>



<h3>Polymorphism</h3>



<h2>Understanding Object-Oriented JavaScript</h2>

The first, and I suppose most important, thing to note is that in JavaScript, everything - numbers, strings, functions - are all objects.

It is also worth noting that there is no direct relationship between JavaScript and class-based OOP. For example, there is no <code>class</code> keyword, like you may find in other object-oriented languages.

As said previously, everything in JavaScript is an object and you can either create a new object from nothing or you can create a <em>prototype</em>, essentially a clone, of an existing object. Hence, JavaScript is what is known as a proto-type based, object-oriented programming language.

There are three patterns used in JavaScript to create objects - Object Literal Pattern, Factory Pattern and Prototype - each one suitable for different scenarios.

These three object-oriented design patterns, along with important topics such as how to implement classes and namespaces, will be covered in the upcoming posts in this series.


Source: <a href="http://www.meanstack.ninja">MEAN Stack Ninja</a>
